const lineHeight=7;let praticle_count=3e3;function getRequestParam(t){const e=t||window.location.search,i={};if(-1!==e.indexOf("?")){const t=e.substr(1).split("&");for(let e=0;e<t.length;e+=1)i[t[e].split("=")[0]]=t[e].split("=")[1]}return i}function color(t){return`hsla(${t.h},${t.s},${t.l},${t.a})`}getRequestParam().img&&(praticle_count=1e3);const ArcCanvas={};function createArcCanvas(t){const e=document.createElement("canvas"),i=e.getContext("2d");e.setAttribute("width",40),e.setAttribute("height",40),i.fillStyle=t,i.arc(20,20,20,0,2*Math.PI),i.fill(),ArcCanvas[t]=e,document.body.appendChild(e)}class Scene{constructor(t,e,i){this.ctx=t,this.draw=this.draw.bind(this),this.init(e,i)}init(t,e){this.width=t,this.height=e,this.center={x:t/2,y:e/2},this.geometrys=[],this.activeGeometry=null,this.tick=0,this.actionIndex=-1,this.particles=[];for(let t=0;t<praticle_count;t++)this.particles.push(new PARTICLE(this.center));this.clear(),cancelAnimationFrame(this.raf)}clear(){this.ctx.fillStyle="rgba(255, 247, 240,0.3)",this.ctx.fillRect(0,0,this.width,this.height)}build(t){this.actions=t,this.geometrys=this.actions.map(t=>t.func?t.func:this.buildGeometry(t.texts)),this.geometrys.length&&this.nextAction()}buildGeometry(t){const e=[];let i="";t.forEach(t=>{i+=t.text});const s=[+!+[]+!+[]]+[+[]]+[+[]]|0,a=~~(s*this.height/this.width),n=document.createElement("canvas"),h=n.getContext("2d");n.setAttribute("width",s),n.setAttribute("height",a),h.fillStyle="#000",h.font="bold 10px Arial";const c=h.measureText(i),r=Math.min(.8*a*10/lineHeight,.8*s*10/c.width);h.font=`bold ${r}px Arial`;const o=h.measureText(i);let l=(s-o.width)/2;const d=(a+r/10*lineHeight)/2;return Object.values(t).forEach(t=>{h.clearRect(0,0,s,a),h.fillText(t.text,l,d),l+=h.measureText(t.text).width;const i=h.getImageData(0,0,s,a),n=[];for(let t=0,e=i.width*i.height;t<e;t++)i.data[4*t+3]&&n.push({x:t%i.width/i.width,y:t/i.width/i.height});e.push({color:t.hsla,points:n})}),e}nextAction(){this.actionIndex++,this.actionIndex>=this.actions.length&&(this.actionIndex=0),this.activeGeometry=this.geometrys[this.actionIndex],this.tick=0,this.setParticle()}setParticle(){this.particles.forEach(t=>{if("function"==typeof this.activeGeometry)t.setAxis(this.activeGeometry(this.width,this.height));else{let e=~~(Math.random()*this.activeGeometry.length),i=this.activeGeometry[e],s=i&&i.points[~~(Math.random()*i.points.length)];s&&t.setAxis({x:s.x*canvasWidth-this.center.x,y:(1-s.y)*canvasHeight-this.center.y,z:~~(30*Math.random()),color:i.color})}})}renderParticles(){this.particles.forEach(t=>{const e=t.getAxis2D();if(this.ctx.beginPath(),"1"===getRequestParam().img)this.ctx.drawImage(HeartCanvas,e.x-15,e.y-15,30,30);else if(getRequestParam().img)this.ctx.drawImage(FlowCanvas,e.x-15,e.y-15,30,30);else{const i=color(t.color);ArcCanvas[i]||createArcCanvas(i),this.ctx.drawImage(ArcCanvas[i],e.x-2,e.y-2,4,4)}})}draw(){this.tick++,this.tick>=this.actions[this.actionIndex].lifeTime&&this.nextAction(),this.clear(),this.renderParticles(),this.raf=requestAnimationFrame(this.draw)}}const FOCUS_POSITION=1200,SPRING=.01,FRICTION=.9;class PARTICLE{constructor(t){this.center=t,this.x=0,this.y=0,this.z=0,this.vx=0,this.vy=0,this.vz=0}setAxis(t){this.nextX=t.x,this.nextY=t.y,this.nextZ=t.z,this.color=t.color}rotateX(t){const e=Math.sin(t),i=Math.cos(t),s=this.nextY*i-this.nextZ*e,a=this.nextZ*i+this.nextY*e,n=this.y*i-this.z*e,h=this.z*i+this.y*e;this.nextY=s,this.nextZ=a,this.y=n,this.z=h}rotateY(t){const e=Math.sin(t),i=Math.cos(t),s=this.nextX*i-this.nextZ*e,a=this.nextZ*i+this.nextX*e,n=this.x*i-this.z*e,h=this.z*i+this.x*e;this.nextX=s,this.nextZ=a,this.x=n,this.z=h}rotateZ(t){const e=Math.sin(t),i=Math.cos(t),s=this.nextX*i-this.nextY*e,a=this.nextY*i+this.nextX*e,n=this.x*i-this.y*e,h=this.y*i+this.x*e;this.nextX=s,this.nextY=a,this.x=n,this.y=h}step(){this.vx+=(this.nextX-this.x)*SPRING,this.vy+=(this.nextY-this.y)*SPRING,this.vz+=(this.nextZ-this.z)*SPRING,this.vx*=FRICTION,this.vy*=FRICTION,this.vz*=FRICTION,this.x+=this.vx,this.y+=this.vy,this.z+=this.vz}getAxis2D(){this.step();const t=FOCUS_POSITION/(FOCUS_POSITION+this.z);return{x:this.center.x+this.x*t,y:this.center.y-this.y*t}}}var canvas,ctx,canvasWidth,canvasHeight,scene,img,HeartCanvas,FlowCanvas;function load(){canvas=document.querySelector("#mycanvas"),ctx=canvas.getContext("2d"),createHeartCanvas(),createFlowCanvas(),reset(),(scene=new Scene(ctx,canvasWidth,canvasHeight)).build(Actions),scene.draw()}function createHeartCanvas(){HeartCanvas=document.getElementById("tulip")}function createFlowCanvas(){const t=document.getElementById("flower"),e=document.createElement("canvas"),i=e.getContext("2d");e.setAttribute("width",100),e.setAttribute("height",100),i.drawImage(t,0,0,100,100);let s=i.getImageData(0,0,100,100);for(let t=0;t<s.data.length;t+=4)s.data[t]>200&&s.data[t+1]>200&&s.data[t+2]>200&&(s.data[t+3]=0),s.data[t]<100&&s.data[t+1]<100&&s.data[t+2]<100&&(s.data[t+3]=0),s.data[t]<150&&s.data[t+1]>150&&(s.data[t+3]=0);i.putImageData(s,0,0),FlowCanvas=e}function reset(){canvasWidth=window.innerWidth,canvasHeight=window.innerHeight;const t=window.devicePixelRatio||1;canvas.width=canvasWidth*t,canvas.height=canvasHeight*t,ctx.scale(t,t),scene&&scene.init(canvasWidth,canvasHeight),scene&&scene.build(Actions),scene&&scene.draw()}window.addEventListener("load",load),window.addEventListener("resize",reset);